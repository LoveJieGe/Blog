@model HxBlogs.WebApp.Models.EditViewModel
@{
    ViewBag.Title = "写文章";
}
@section styles{
    <link href="~/Content/App/css/blog-edit.css?v=1.0.0.3" rel="stylesheet" />
}
<div class="blog-edit blog-container">
    <form class="form-horizontal" role="form" action="save" method="post">
        <div class="form-row">
            <div class="col-sm-6 form-group">
                <label class="control-label" for="Title">文章标题<span class="required">*</span></label>
                <div>
                    <input type="text" name="Title" required class="form-control" placeholder="文章标题,请控制在100字以内" />
                </div>
            </div>
            <div class="col-sm-2 form-group d-none d-sm-block">
            </div>
            <div class="form-group col-sm-4">
                <label class="control-label" for="CatId">
                    系统分类<span class="required">*</span>
                </label>
                <div>
                    <select class="form-control" required name="CatId">
                        <option value="-1" selected="selected">请选择</option>
                        @if (ViewBag.CategoryList != null)
                        {
                            foreach (HxBlogs.Model.Category item in ViewBag.CategoryList)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="form-row mb-2">
            <div class="col-md-12 col-sm-12">
                <textarea name="ContentHtml" id="editor"></textarea>
            </div>
        </div>
        <div class="form-row d-none">
            <div class="form-group col-md-12 col-sm-12 col-lg-12">
                <label class="text-left blog-category-label">个人分类:</label>
                <input type="hidden" name="PersonTags" data-count="0" />
                <button type="button" id="addTag" class="btn btn-link fa fa-plus-square"> 添加分类</button>
            </div>
        </div>
        <div class="form-row d-none">
            <div class="col-md-3 col-sm-4 col-sm-push-1 blog-col-xs-pull-1">
                @if (ViewBag.BlogTagList != null)
                {
                    <div class="form-group">
                        @for (int i = 0; i < ViewBag.BlogTagList.Count; i++)
                        {
                            <div class="custom-control custom-checkbox custom-control-inline">
                                <input type="checkbox" class="custom-control-input" name="PersonTop" id="@("blogTag"+ViewBag.BlogTagList[i].Id)" value="@ViewBag.BlogTagList[i].Id" />
                                <label class="custom-control-label hx-control-label" for="@("blogTag"+ViewBag.BlogTagList[i].Id)">
                                    @ViewBag.BlogTagList[i].Name
                                </label>
                            </div>

                        }
                    </div>
                }
            </div>
        </div>
        <div class="form-row d-none">
            <div class="form-group col-sm-4 col-xs-12">
                <label for="TypeId" class="control-label">
                    文章类型<span class="required">*</span>
                </label>
                <div class="">
                    <select class="custom-select" required name="TypeId">
                        <option value="-1" selected="selected">请选择</option>
                        @if (ViewBag.BlogTypeList != null)
                        {
                            foreach (HxBlogs.Model.BlogType item in ViewBag.BlogTypeList)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="form-group col-sm-8 col-xs-12">
                <label class="control-label hidden-xs hidden-md hidden-lg" style="visibility:hidden;">
                    选项
                </label>
                <div class="mt-2 ml-2">
                    <div class="custom-control custom-checkbox custom-control-inline">
                        <input type="checkbox" class="custom-control-input" name="PersonTop" id="PersonTop" value="N" />
                        <label class="custom-control-label hx-control-label" for="PersonTop">
                            个人置顶
                        </label>
                    </div>
                    <div class="custom-control custom-checkbox custom-control-inline">
                        <input type="checkbox" class="custom-control-input" name="IsPrivate" id="IsPrivate" value="N" />
                        <label class="custom-control-label hx-control-label" for="IsPrivate">
                            仅自己可见
                        </label>
                    </div>
                    <div class="custom-control custom-checkbox custom-control-inline">
                        <input type="checkbox" class="custom-control-input" name="CanCmt" id="CanCmt" checked="checked" value="Y" />
                        <label class="custom-control-label hx-control-label" for="CanCmt">
                            允许评论
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-row d-none">
            <div class="col-sm-12">
                <button type="button" value="Y" class="btn btn-md btn-success btn-save">发布文章</button>
                <button type="button" value="N" class="btn btn-secondary btn-md btn-save" style="margin-left: .8rem;">保存草稿</button>
            </div>
        </div>
    </form>
</div>
@section scripts{
    <script src="~/Content/Plugin/CkEditor/ckeditor.js"></script>
    <script type="text/javascript">
        ClassicEditor.create(document.querySelector('#editor'), {
            removePlugins: ['mediaEmbed'],
            toolbar: [
                'heading',
                '|',
                'bold',
                'italic',
                'fontFamily',
                'fontSize',
                'alignment',
                'highlight',
                'link',
                'bulletedList',
                'numberedList',
                'imageUpload',
                // 'ckfinder',
                'blockQuote',
                'insertTable',
                'undo',
                'redo'
            ],
            ckfinder: {
                // Upload the images to the server using the CKFinder QuickUpload command.
                uploadUrl: '/file/upload?command=QuickUpload&type=Images&responseType=json',
                // Define the CKFinder configuration (if necessary).
                options: {
                    resourceType: 'Images',
                }
            },
            fontSize: {
                options: [9, 11, 13, 'default', 17, 19, 21]
            },
            image: {
                toolbar: ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],
                styles: ['full', 'alignLeft', 'alignCenter', 'alignRight', 'side']
            }
        }).then(editor => {
            window._HxCkEditor = editor;
            $('div.d-none').removeClass('d-none');
        }).catch(error => {
            console.error(error);
        });
        $(function () {
            $('input:checkbox').change(function () {
                var $me = $(this);
                if ($me.is(':checked')) {
                    $me.val('Y');
                } else {
                    $me.val('N');
                }
            });

            $('.btn-save').click(function () {
                if (Edit.validate()) {
                    var $me = $(this),
                        data = $('form').serializeArray();
                    data.push({ name: 'IsPublish', value: $me.val() });
                    var content = data.find(d => { return d.name == 'ContentHtml'; }),
                        d = _HxCkEditor.getData();
                    if (content) {
                        content.value = d;
                    } else {
                        data.push({ name: 'ContentHtml', value: d });
                    }
                    HxCore.ajax('save', {
                        button: '.btn-save',
                        data: data,
                        maskTarget: true,
                        success: function (d) {
                            debugger
                        }
                    });
                }
            });
            var Edit = {
                validate() {
                    var $form = $('form'),
                        allField = $form.find('input[name][required],select[required]'),
                        result = true;
                    allField.each(function (index, el) {
                        var field = $(el),
                            isEmpty = false;
                        if (field.is('input')) {
                            if ($.isEmpty(field.val())) {
                                isEmpty = true;
                            }
                        } else if (field.is('select')) {
                            if (field.val() == -1) {
                                isEmpty = true;
                            }
                        }
                        if (isEmpty) {
                            var name = field.attr('name'),
                                label = $form.find(`label[for='${name}']`),
                                labelText = (label.text() || '').replace(/\*/g, '');
                            HxCore.remindError(`${labelText}是必填字段!`);
                            result = false;
                            return false;
                        }
                    });
                    if (result && _HxCkEditor.getData() == "<p>&nbsp;</p>") {
                        HxCore.remindError('请输入内容!');
                        result = false;
                    }
                    return result;
                },
                doPersonTag(text, add) {
                    var $tag = $('input[name=PersonTags]'),
                        tagVal = $tag.val(),
                        tagObj = {},
                        result = false;
                    if (!$.isEmpty(tagVal)) {
                        tagObj = JSON.parse(tagVal);
                    }
                    if (add) {
                        var count = $tag.data('count'),
                            exist = false;
                        if ($.isString(text)) {
                            text = $.trim(text);
                            $.each(tagObj, (key, value) => {
                                if ($.trim(value) == text) {
                                    exist = true;
                                    return false;
                                }
                            });
                            count++;
                            if (!exist) {
                                result = true;
                                tagObj['newData' + count] = text;
                                $tag.data('count', count);
                            }
                        } else if ($.isObject(text)) {
                            $.extend(tagObj, text);
                        }
                        if (!$.isEmptyObject(tagObj)) {
                            $tag.val(JSON.stringify(tagObj));
                        }
                    } else {
                        if ($.isString(text)) {
                            $.each(tagObj, (key, value) => {
                                if ($.trim(value) == text) {
                                    delete tagObj[key];
                                    result = true;
                                    return false;
                                }
                            });
                        } else if ($.isObject(text)) {
                            $.each(tagObj, (key, value) => {
                                if ($.trim(value) == $.trim(text[key])) {
                                    delete tagObj[key];
                                    result = true;
                                    return false;
                                }
                            });
                        }
                        $tag.val(JSON.stringify(tagObj));
                    }
                    return result;
                },
                addTag() {
                    var $div = $('<div class="blog-tag-box"></div>'),
                        $span = $(`<span class="tag" contenteditable = "true"></span>
                                <i class="fa fa-times"></i>`);
                    $div.append($span).insertBefore($('#addTag'));
                    $div.find('i.fa-times').click(function () {
                        var $me = $(this),
                            $p = $me.parent(),
                            $prev = $me.prev(),
                            text = $prev.text();
                        $p.remove();
                        Edit.doPersonTag($prev.text());
                    });
                    $span.focus().keydown(function (e) {
                        var code = (e.keyCode ? e.keyCode : e.which);
                        if (code === 13) {
                            $(e.target).blur();
                        }
                    }).blur(function () {
                        var $me = $(this),
                            text = $.trim($me.text()),
                            $parent = $me.parent();
                        if ($.isEmpty(text)) {
                            $parent.remove();
                        } else {
                            $me.attr('contenteditable', 'false');
                            if (!Edit.doPersonTag(text, true)) {
                                $parent.remove();
                            }
                        }
                    });
                }
            };
            $('#addTag').click(function () {
                Edit.addTag();
            });
        });
    </script>
}

